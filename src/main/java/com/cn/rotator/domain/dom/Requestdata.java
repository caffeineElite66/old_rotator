package com.cn.rotator.domain.dom;

import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;

/**
 * Object mapping for hibernate-handled table: RequestData.
 * 
 * @author autogenerated
 */

@Entity
@Table(name = "RequestData", catalog = "rotator")
public class Requestdata implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559008640L;

	/**
	 * Use a WeakHashMap so entries will be garbage collected once all entities
	 * referring to a saved hash are garbage collected themselves.
	 */
	private static final Map<Serializable, Long> SAVED_HASHES = Collections
			.synchronizedMap(new WeakHashMap<Serializable, Long>());

	/** hashCode temporary storage. */
	private volatile Long hashCode;

	/** Field mapping. */
	private String countryCode;
	/** Field mapping. */
	private Date createdAt;
	/** Field mapping. */
	private String httpReferer;
	/** Field mapping. */
	private Long id = 0L; // init for hibernate bug workaround
	/** Field mapping. */
	private String ip;
	/** Field mapping. */
	private String pathTranslated;
	/** Field mapping. */
	private Integer port;
	/** Field mapping. */
	private String requestMethod;
	/** Field mapping. */
	private String requestUri;
	/** Field mapping. */
	private String userAgent;

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Requestdata() {
		// Default constructor
	}

	/**
	 * Constructor taking a given ID.
	 * 
	 * @param id
	 *            to set
	 */
	public Requestdata(Long id) {
		this.id = id;
	}

	/**
	 * Constructor taking a given ID.
	 * 
	 * @param countryCode
	 *            String object;
	 * @param createdAt
	 *            Date object;
	 * @param httpReferer
	 *            String object;
	 * @param id
	 *            Long object;
	 * @param ip
	 *            String object;
	 * @param pathTranslated
	 *            String object;
	 * @param port
	 *            Integer object;
	 * @param requestMethod
	 *            String object;
	 * @param requestUri
	 *            String object;
	 * @param userAgent
	 *            String object;
	 */
	public Requestdata(String countryCode, Date createdAt, String httpReferer,
			Long id, String ip, String pathTranslated, Integer port,
			String requestMethod, String requestUri, String userAgent) {

		this.countryCode = countryCode;
		this.createdAt = createdAt;
		this.httpReferer = httpReferer;
		this.id = id;
		this.ip = ip;
		this.pathTranslated = pathTranslated;
		this.port = port;
		this.requestMethod = requestMethod;
		this.requestUri = requestUri;
		this.userAgent = userAgent;
	}

	/**
	 * Return the type of this class. Useful for when dealing with proxies.
	 * 
	 * @return Defining class.
	 */
	@Transient
	public Class<?> getClassType() {
		return Requestdata.class;
	}

	/**
	 * Return the value associated with the column: countryCode.
	 * 
	 * @return A String object (this.countryCode)
	 */
	@Column(name = "country_code", nullable = false, length = 2)
	public String getCountryCode() {
		return this.countryCode;

	}

	/**
	 * Set the value related to the column: countryCode.
	 * 
	 * @param countryCode
	 *            the countryCode value you wish to set
	 */
	public void setCountryCode(final String countryCode) {
		this.countryCode = countryCode;
	}

	/**
	 * Return the value associated with the column: createdAt.
	 * 
	 * @return A Date object (this.createdAt)
	 */
	@Column(name = "created_at", nullable = false)
	public Date getCreatedAt() {
		return this.createdAt;

	}

	/**
	 * Set the value related to the column: createdAt.
	 * 
	 * @param createdAt
	 *            the createdAt value you wish to set
	 */
	public void setCreatedAt(final Date createdAt) {
		this.createdAt = createdAt;
	}

	/**
	 * Return the value associated with the column: httpReferer.
	 * 
	 * @return A String object (this.httpReferer)
	 */
	@Column(name = "http_referer", nullable = false, length = 255)
	public String getHttpReferer() {
		return this.httpReferer;

	}

	/**
	 * Set the value related to the column: httpReferer.
	 * 
	 * @param httpReferer
	 *            the httpReferer value you wish to set
	 */
	public void setHttpReferer(final String httpReferer) {
		this.httpReferer = httpReferer;
	}

	/**
	 * Return the value associated with the column: id.
	 * 
	 * @return A Long object (this.id)
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id", nullable = false)
	public Long getId() {
		return this.id;

	}

	/**
	 * Set the value related to the column: id.
	 * 
	 * @param id
	 *            the id value you wish to set
	 */
	public void setId(final Long id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ((this.id == null || this.id == 0L) && (id != null)
				&& (this.hashCode != null)) {
			SAVED_HASHES.put(id, this.hashCode);
		}
		this.id = id;
	}

	/**
	 * Return the value associated with the column: ip.
	 * 
	 * @return A String object (this.ip)
	 */
	@Column(nullable = false, length = 15)
	public String getIp() {
		return this.ip;

	}

	/**
	 * Set the value related to the column: ip.
	 * 
	 * @param ip
	 *            the ip value you wish to set
	 */
	public void setIp(final String ip) {
		this.ip = ip;
	}

	/**
	 * Return the value associated with the column: pathTranslated.
	 * 
	 * @return A String object (this.pathTranslated)
	 */
	@Column(name = "path_translated", nullable = false, length = 255)
	public String getPathTranslated() {
		return this.pathTranslated;

	}

	/**
	 * Set the value related to the column: pathTranslated.
	 * 
	 * @param pathTranslated
	 *            the pathTranslated value you wish to set
	 */
	public void setPathTranslated(final String pathTranslated) {
		this.pathTranslated = pathTranslated;
	}

	/**
	 * Return the value associated with the column: port.
	 * 
	 * @return A Integer object (this.port)
	 */
	@Column(nullable = false)
	public Integer getPort() {
		return this.port;

	}

	/**
	 * Set the value related to the column: port.
	 * 
	 * @param port
	 *            the port value you wish to set
	 */
	public void setPort(final Integer port) {
		this.port = port;
	}

	/**
	 * Return the value associated with the column: requestMethod.
	 * 
	 * @return A String object (this.requestMethod)
	 */
	@Column(name = "request_method", nullable = false, length = 10)
	public String getRequestMethod() {
		return this.requestMethod;

	}

	/**
	 * Set the value related to the column: requestMethod.
	 * 
	 * @param requestMethod
	 *            the requestMethod value you wish to set
	 */
	public void setRequestMethod(final String requestMethod) {
		this.requestMethod = requestMethod;
	}

	/**
	 * Return the value associated with the column: requestUri.
	 * 
	 * @return A String object (this.requestUri)
	 */
	@Column(name = "request_uri", nullable = false, length = 255)
	public String getRequestUri() {
		return this.requestUri;

	}

	/**
	 * Set the value related to the column: requestUri.
	 * 
	 * @param requestUri
	 *            the requestUri value you wish to set
	 */
	public void setRequestUri(final String requestUri) {
		this.requestUri = requestUri;
	}

	/**
	 * Return the value associated with the column: userAgent.
	 * 
	 * @return A String object (this.userAgent)
	 */
	@Column(name = "user_agent", nullable = false, length = 100)
	public String getUserAgent() {
		return this.userAgent;

	}

	/**
	 * Set the value related to the column: userAgent.
	 * 
	 * @param userAgent
	 *            the userAgent value you wish to set
	 */
	public void setUserAgent(final String userAgent) {
		this.userAgent = userAgent;
	}

	/**
	 * Deep copy.
	 * 
	 * @return cloned object
	 * @throws CloneNotSupportedException
	 *             on error
	 */
	@Override
	public Requestdata clone() throws CloneNotSupportedException {

		final Requestdata copy = (Requestdata) super.clone();

		copy.setCountryCode(this.getCountryCode());
		copy.setCreatedAt(this.getCreatedAt());
		copy.setHttpReferer(this.getHttpReferer());
		copy.setId(this.getId());
		copy.setIp(this.getIp());
		copy.setPathTranslated(this.getPathTranslated());
		copy.setPort(this.getPort());
		copy.setRequestMethod(this.getRequestMethod());
		copy.setRequestUri(this.getRequestUri());
		copy.setUserAgent(this.getUserAgent());
		return copy;
	}

	/**
	 * Provides toString implementation.
	 * 
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();

		sb.append("countryCode: " + this.getCountryCode() + ", ");
		sb.append("createdAt: " + this.getCreatedAt() + ", ");
		sb.append("httpReferer: " + this.getHttpReferer() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("ip: " + this.getIp() + ", ");
		sb.append("pathTranslated: " + this.getPathTranslated() + ", ");
		sb.append("port: " + this.getPort() + ", ");
		sb.append("requestMethod: " + this.getRequestMethod() + ", ");
		sb.append("requestUri: " + this.getRequestUri() + ", ");
		sb.append("userAgent: " + this.getUserAgent());
		return sb.toString();
	}

	/**
	 * Equals implementation.
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat
	 *            Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;

		if (this == aThat) {
			return true;
		}

		if (aThat instanceof HibernateProxy) {
			// narrow down the proxy to the class we are dealing with.
			try {
				proxyThat = ((HibernateProxy) aThat)
						.getHibernateLazyInitializer().getImplementation();
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
			}
		}
		if (aThat == null) {
			return false;
		}

		final Requestdata that;
		try {
			that = (Requestdata) proxyThat;
			if (!(that.getClassType().equals(this.getClassType()))) {
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
			return false;
		} catch (ClassCastException e) {
			return false;
		}

		boolean result = true;
		result = result
				&& (((this.getId() == null) && (that.getId() == null)) || (this
						.getId() != null && this.getId().equals(that.getId())));
		result = result
				&& (((getCountryCode() == null) && (that.getCountryCode() == null)) || (getCountryCode() != null && getCountryCode()
						.equals(that.getCountryCode())));
		result = result
				&& (((getCreatedAt() == null) && (that.getCreatedAt() == null)) || (getCreatedAt() != null && getCreatedAt()
						.equals(that.getCreatedAt())));
		result = result
				&& (((getHttpReferer() == null) && (that.getHttpReferer() == null)) || (getHttpReferer() != null && getHttpReferer()
						.equals(that.getHttpReferer())));
		result = result
				&& (((getIp() == null) && (that.getIp() == null)) || (getIp() != null && getIp()
						.equals(that.getIp())));
		result = result
				&& (((getPathTranslated() == null) && (that.getPathTranslated() == null)) || (getPathTranslated() != null && getPathTranslated()
						.equals(that.getPathTranslated())));
		result = result
				&& (((getPort() == null) && (that.getPort() == null)) || (getPort() != null && getPort()
						.equals(that.getPort())));
		result = result
				&& (((getRequestMethod() == null) && (that.getRequestMethod() == null)) || (getRequestMethod() != null && getRequestMethod()
						.equals(that.getRequestMethod())));
		result = result
				&& (((getRequestUri() == null) && (that.getRequestUri() == null)) || (getRequestUri() != null && getRequestUri()
						.equals(that.getRequestUri())));
		result = result
				&& (((getUserAgent() == null) && (that.getUserAgent() == null)) || (getUserAgent() != null && getUserAgent()
						.equals(that.getUserAgent())));
		return result;
	}

	/**
	 * Calculate the hashcode.
	 * 
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if (this.hashCode == null) {
			synchronized (this) {
				if (this.hashCode == null) {
					Long newHashCode = null;

					if (getId() != null) {
						newHashCode = SAVED_HASHES.get(getId());
					}

					if (newHashCode == null) {
						if (getId() != null && getId() != 0L) {
							newHashCode = getId();
						} else {
							newHashCode = (long) super.hashCode();

						}
					}

					this.hashCode = newHashCode;
				}
			}
		}
		return (int) (this.hashCode & 0xffffff);
	}

}
