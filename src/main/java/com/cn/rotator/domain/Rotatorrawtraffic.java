package com.cm.rotator.domain.rotator.model.obj.rotator;

import com.cm.rotator.domain.rotator.model.obj.rotator.iface.IRotatorrawtraffic;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: RotatorRawTraffic.
 * @author autogenerated
 */

@Entity
@Table(name = "RotatorRawTraffic", catalog = "rotator")
public class Rotatorrawtraffic implements Cloneable, Serializable, IPojoGenEntity, IRotatorrawtraffic {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559008636L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Date createdAt;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String ip;
	/** Field mapping. */
	private java.math.BigDecimal pathPercent;
	/** Field mapping. */
	private Long requestDataId;
	/** Field mapping. */
	private Long rotatorDestinationPathId;
	/** Field mapping. */
	private String url;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Rotatorrawtraffic() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Rotatorrawtraffic(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param createdAt Date object;
	 * @param id Integer object;
	 * @param ip String object;
	 * @param pathPercent java.math.BigDecimal object;
	 * @param rotatorDestinationPathId Long object;
	 * @param url String object;
	 */
	public Rotatorrawtraffic(Date createdAt, Integer id, String ip, 					
			java.math.BigDecimal pathPercent, Long rotatorDestinationPathId, String url) {

		this.createdAt = createdAt;
		this.id = id;
		this.ip = ip;
		this.pathPercent = pathPercent;
		this.rotatorDestinationPathId = rotatorDestinationPathId;
		this.url = url;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Rotatorrawtraffic.class;
	}
 

    /**
     * Return the value associated with the column: createdAt.
	 * @return A Date object (this.createdAt)
	 */
	@Column( name = "created_at", nullable = false  )
	public Date getCreatedAt() {
		return this.createdAt;
		
	}
	

  
    /**  
     * Set the value related to the column: createdAt.
	 * @param createdAt the createdAt value you wish to set
	 */
	public void setCreatedAt(final Date createdAt) {
		this.createdAt = createdAt;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column( name = "id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: ip.
	 * @return A String object (this.ip)
	 */
	@Column( nullable = false, length = 15  )
	public String getIp() {
		return this.ip;
		
	}
	

  
    /**  
     * Set the value related to the column: ip.
	 * @param ip the ip value you wish to set
	 */
	public void setIp(final String ip) {
		this.ip = ip;
	}

    /**
     * Return the value associated with the column: pathPercent.
	 * @return A java.math.BigDecimal object (this.pathPercent)
	 */
	@Column( name = "path_percent", nullable = false  )
	public java.math.BigDecimal getPathPercent() {
		return this.pathPercent;
		
	}
	

  
    /**  
     * Set the value related to the column: pathPercent.
	 * @param pathPercent the pathPercent value you wish to set
	 */
	public void setPathPercent(final java.math.BigDecimal pathPercent) {
		this.pathPercent = pathPercent;
	}

    /**
     * Return the value associated with the column: requestDataId.
	 * @return A Long object (this.requestDataId)
	 */
	@Column( name = "request_data_id"  )
	public Long getRequestDataId() {
		return this.requestDataId;
		
	}
	

  
    /**  
     * Set the value related to the column: requestDataId.
	 * @param requestDataId the requestDataId value you wish to set
	 */
	public void setRequestDataId(final Long requestDataId) {
		this.requestDataId = requestDataId;
	}

    /**
     * Return the value associated with the column: rotatorDestinationPathId.
	 * @return A Long object (this.rotatorDestinationPathId)
	 */
	@Column( name = "rotator_destination_path_id", nullable = false  )
	public Long getRotatorDestinationPathId() {
		return this.rotatorDestinationPathId;
		
	}
	

  
    /**  
     * Set the value related to the column: rotatorDestinationPathId.
	 * @param rotatorDestinationPathId the rotatorDestinationPathId value you wish to set
	 */
	public void setRotatorDestinationPathId(final Long rotatorDestinationPathId) {
		this.rotatorDestinationPathId = rotatorDestinationPathId;
	}

    /**
     * Return the value associated with the column: url.
	 * @return A String object (this.url)
	 */
	@Column( nullable = false, length = 255  )
	public String getUrl() {
		return this.url;
		
	}
	

  
    /**  
     * Set the value related to the column: url.
	 * @param url the url value you wish to set
	 */
	public void setUrl(final String url) {
		this.url = url;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Rotatorrawtraffic clone() throws CloneNotSupportedException {
		
        final Rotatorrawtraffic copy = (Rotatorrawtraffic)super.clone();

		copy.setCreatedAt(this.getCreatedAt());
		copy.setId(this.getId());
		copy.setIp(this.getIp());
		copy.setPathPercent(this.getPathPercent());
		copy.setRequestDataId(this.getRequestDataId());
		copy.setRotatorDestinationPathId(this.getRotatorDestinationPathId());
		copy.setUrl(this.getUrl());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("createdAt: " + this.getCreatedAt() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("ip: " + this.getIp() + ", ");
		sb.append("pathPercent: " + this.getPathPercent() + ", ");
		sb.append("requestDataId: " + this.getRequestDataId() + ", ");
		sb.append("rotatorDestinationPathId: " + this.getRotatorDestinationPathId() + ", ");
		sb.append("url: " + this.getUrl());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Rotatorrawtraffic that; 
		try {
			that = (Rotatorrawtraffic) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCreatedAt() == null) && (that.getCreatedAt() == null)) || (getCreatedAt() != null && getCreatedAt().equals(that.getCreatedAt())));
		result = result && (((getIp() == null) && (that.getIp() == null)) || (getIp() != null && getIp().equals(that.getIp())));
		result = result && (((getPathPercent() == null) && (that.getPathPercent() == null)) || (getPathPercent() != null && getPathPercent().equals(that.getPathPercent())));
		result = result && (((getRequestDataId() == null) && (that.getRequestDataId() == null)) || (getRequestDataId() != null && getRequestDataId().equals(that.getRequestDataId())));
		result = result && (((getRotatorDestinationPathId() == null) && (that.getRotatorDestinationPathId() == null)) || (getRotatorDestinationPathId() != null && getRotatorDestinationPathId().equals(that.getRotatorDestinationPathId())));
		result = result && (((getUrl() == null) && (that.getUrl() == null)) || (getUrl() != null && getUrl().equals(that.getUrl())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {
							newHashCode = super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
